query:

use sql_invoicing;

select max(invoice_total) -- it means in invoice total column which has the highest value that value returns
from invoices;

query:

use sql_invoicing;

select 
     max(invoice_total),
     min(invoice_total),
     avg(invoice_total)
     
from invoices;

query:

use sql_invoicing;

select 
     max(invoice_total) as highest,
     min(invoice_total) as lowest,
     avg(invoice_total) as average
     
from invoices;

query:


use sql_invoicing;

select 
     max(invoice_total) as highest,
     min(invoice_total) as lowest,
     avg(invoice_total) as average,
     sum(invoice_total) as total,
     count(invoice_total) as total_records -- it return not null records number only if null it does not count that record
     
from invoices;

query:

use sql_invoicing;

select 
     max(invoice_total) as highest,
     min(invoice_total) as lowest,
     avg(invoice_total) as average,
     sum(invoice_total) as total,
     count(invoice_total) as total_records,
     count(payment_date) as number_of_payemntsRecords,
     count(*) as total_records -- if you want null records also as a count using like this
     
from invoices;


query:


use sql_invoicing;

select 
     max(invoice_total) as highest,
     min(invoice_total) as lowest,
     avg(invoice_total) as average,
     sum(invoice_total) as total,
     count(invoice_total * 1.1) as total_records,
     count(payment_date) as number_of_payemntsRecords,
     count(*) as total_records -- if you want null records also as a count using like this
     
from invoices
where invoice_date > '2019-07-01'; -- based on the condition it return the values.

query:

use sql_invoicing;

select 
     max(invoice_total) as highest,
     min(invoice_total) as lowest,
     avg(invoice_total) as average,
     sum(invoice_total) as total,
     count(invoice_total * 1.1) as total_records,
     count(payment_date) as number_of_payemntsRecords,
     count( distinct client_id) as total_records -- if you want null records also as a count using like this and also unique id's use distinct
     
from invoices
where invoice_date > '2019-07-01';



Assignment:

use sql_invoicing;

select 'first half of 2019' as date_range,
sum(invoice_total) as total_sales,
sum(payment_total) as total_payments,
sum(invoice_total - payment_total) as what_we_expect

from invoices
where invoice_date BETWEEN '2019-01-01' and '2019-06-30';